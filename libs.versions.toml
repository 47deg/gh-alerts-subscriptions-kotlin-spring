[versions]
arrow = "2.0.0-SNAPSHOT"
suspendapp = "0.3.1"
arrowGradleConfig = "0.10.1"
coroutines = "1.6.4"
kotlin = "1.8.0"
kotest = "5.5.4"
kotest-plugin = "5.5.4"
kover = "0.6.1"
detekt = "1.22.0"
logback = "1.4.5"
testcontainers = "1.17.6"
postgresql = "42.5.4"
kotest-arrow = "1.3.0"
kotest-arrow-fx = "1.3.0"
kotest-spring = "1.1.2"
kotest-testcontainers = "1.3.4"
flyway = "9.12.0"
kotlin-logging = "3.0.4"
avro4k = "1.6.0"
kotlin-kafka = "0.3.0"
kotlinx-coroutines-reactor = "1.6.4"
kotlinx-serialization-jsonpath = "0.2.0"
kotlinx-datetime = "0.4.0"
kafka = "7.3.0"
avro = "1.11.1"
prometheus = "1.10.2"
tegralOpenApi = "0.0.3"
r2dbc = "1.0.1.RELEASE"
reactor-kafka = "1.3.16"
reactor-kotlin-extensions = "1.2.1"
spring = "3.0.4"
springdoc-openapi = "2.0.4"
dependency-management = "1.1.0"

[libraries]
arrow-core = { module = "io.arrow-kt:arrow-core", version.ref = "arrow" }
arrow-fx = { module = "io.arrow-kt:arrow-fx-coroutines", version.ref = "arrow" }
arrow-fx-resilience = { module = "io.arrow-kt:arrow-fx-resilience", version.ref = "arrow" }
suspendapp = { module = "io.arrow-kt:suspendapp", version.ref = "suspendapp" }
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
kotest-assertionsCore = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-frameworkEngine = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
kotest-runnerJUnit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-arrow = { module = "io.kotest.extensions:kotest-assertions-arrow", version.ref = "kotest-arrow" }
kotest-arrow-fx = { module = "io.kotest.extensions:kotest-assertions-arrow-fx-coroutines", version.ref = "kotest-arrow-fx" }
kotest-testcontainers = { module = "io.kotest.extensions:kotest-extensions-testcontainers", version.ref = "kotest-testcontainers" }
kotest-spring = { module = "io.kotest.extensions:kotest-extensions-spring", version.ref = "kotest-spring" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
kotlin-gradle = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
detekt-gradle = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
flyway = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
klogging = { module = "io.github.microutils:kotlin-logging", version.ref = "kotlin-logging" }
avro4k = { module = "com.github.avro-kotlin.avro4k:avro4k-core", version.ref = "avro4k" }
kotlin-kafka = { module = "io.github.nomisrev:kotlin-kafka", version.ref = "kotlin-kafka" }
kotlinx-serialization-jsonpath = { module = "io.github.nomisrev:kotlinx-serialization-jsonpath", version.ref = "kotlinx-serialization-jsonpath" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kafka-schema-registry = { module = "io.confluent:kafka-schema-registry-client", version.ref = "kafka" }
kafka-avro-serializer = { module = "io.confluent:kafka-avro-serializer", version.ref = "kafka" }
avro = { module = "org.apache.avro:avro", version.ref = "avro" }
micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "prometheus" }
spring-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring" }
spring-r2dbc = { module = "org.springframework.boot:spring-boot-starter-data-r2dbc", version.ref = "spring" }
spring-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring" }
spring-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "spring" }
spring-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring" }
spring-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring" }
springdoc-openapi = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc-openapi" }
springdoc-openapi-webflux = { module = "org.springdoc:springdoc-openapi-starter-webflux-ui", version.ref = "springdoc-openapi" }
r2dbc-postgres = { module = "org.postgresql:r2dbc-postgresql", version.ref = "r2dbc" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx-coroutines-reactor" }
reactor-kotlin-extensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions", version.ref = "reactor-kotlin-extensions" }
reactor-kafka = { module = "io.projectreactor.kafka:reactor-kafka", version.ref = "reactor-kafka" }

[bundles]
arrow = [
    "arrow-core",
    "arrow-fx",
    "arrow-fx-resilience"
]
kotest = [
    "kotest-assertionsCore",
    "kotest-frameworkEngine",
    "kotest-property",
    "kotest-runnerJUnit5",
    "kotest-arrow",
    "kotest-arrow-fx",
    "kotest-spring",
    "kotest-testcontainers"
]
spring = [
    "spring-webflux",
    "spring-r2dbc",
    "spring-actuator",
    "spring-kafka",
    "springdoc-openapi",
    "springdoc-openapi-webflux"
]

[plugins]
spring = { id = "org.springframework.boot", version.ref = "spring" }
dependency-management = { id = "io.spring.dependency-management", version.ref = "dependency-management" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
kotest-multiplatform = { id = "io.kotest.multiplatform", version.ref = "kotest-plugin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
